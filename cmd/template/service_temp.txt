package service

import (
	"github.com/Madou-Shinni/gin-quickstart/internal/data"
	"github.com/Madou-Shinni/gin-quickstart/internal/domain"
	"github.com/Madou-Shinni/gin-quickstart/pkg/request"
	"github.com/Madou-Shinni/gin-quickstart/pkg/response"
	"github.com/Madou-Shinni/go-logger"
	"go.uber.org/zap"
)

// 定义接口
type {{.Module}}Repo interface {
	Create({{.ModuleLower}} domain.{{.Module}}) error
	Delete({{.ModuleLower}} domain.{{.Module}}) error
	Update({{.ModuleLower}} map[string]interface{}) error
	Find({{.ModuleLower}} domain.{{.Module}}) (domain.{{.Module}}, error)
	List(page domain.Page{{.Module}}Search) ([]domain.{{.Module}}, error)
	Count() (int64, error)
	DeleteByIds(ids request.Ids) error
}

type {{.Module}}Service struct {
	repo {{.Module}}Repo
}

func New{{.Module}}Service() *{{.Module}}Service {
	return &{{.Module}}Service{repo: &data.{{.Module}}Repo{}}
}

func (s *{{.Module}}Service) Add({{.ModuleLower}} domain.{{.Module}}) error {
	// 3.持久化入库
	if err := s.repo.Create({{.ModuleLower}}); err != nil {
		// 4.记录日志
		logger.Error("s.repo.Create({{.ModuleLower}})", zap.Error(err), zap.Any("domain.{{.Module}}", {{.ModuleLower}}))
		return err
	}

	return nil
}

func (s *{{.Module}}Service) Delete({{.ModuleLower}} domain.{{.Module}}) error {
	if err := s.repo.Delete({{.ModuleLower}}); err != nil {
		logger.Error("s.repo.Delete({{.ModuleLower}})", zap.Error(err), zap.Any("domain.{{.Module}}", {{.ModuleLower}}))
		return err
	}

	return nil
}

func (s *{{.Module}}Service) Update({{.ModuleLower}} map[string]interface{}) error {
	if err := s.repo.Update({{.ModuleLower}}); err != nil {
		logger.Error("s.repo.Update({{.ModuleLower}})", zap.Error(err), zap.Any("domain.{{.Module}}", {{.ModuleLower}}))
		return err
	}

	return nil
}

func (s *{{.Module}}Service) Find({{.ModuleLower}} domain.{{.Module}}) (domain.{{.Module}}, error) {
	res, err := s.repo.Find({{.ModuleLower}})

	if err != nil {
		logger.Error("s.repo.Find({{.ModuleLower}})", zap.Error(err), zap.Any("domain.{{.Module}}", {{.ModuleLower}}))
		return res, err
	}

	return res, nil
}

func (s *{{.Module}}Service) List(page domain.Page{{.Module}}Search) (response.PageResponse, error) {
	var (
		pageRes response.PageResponse
	)

	data, err := s.repo.List(page)
	if err != nil {
		logger.Error("s.repo.List(page)", zap.Error(err), zap.Any("domain.Page{{.Module}}Search", page))
		return pageRes, err
	}

	count, err := s.repo.Count()
	if err != nil {
		logger.Error("s.repo.Count()", zap.Error(err))
		return pageRes, err
	}

	pageRes.Data = data
	pageRes.Total = count

	return pageRes, nil
}

func (s *{{.Module}}Service) DeleteByIds(ids request.Ids) error {
	if err := s.repo.DeleteByIds(ids); err != nil {
		logger.Error("s.DeleteByIds(ids)", zap.Error(err), zap.Any("ids request.Ids", ids))
		return err
	}

	return nil
}
