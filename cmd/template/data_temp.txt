package data

import (
    "context"
    "errors"
    "fmt"
	"github.com/Madou-Shinni/gin-quickstart/internal/domain"
	"github.com/Madou-Shinni/gin-quickstart/pkg/global"
	"github.com/Madou-Shinni/gin-quickstart/pkg/request"
	"github.com/Madou-Shinni/gin-quickstart/pkg/tools/pagelimit"
)

type {{.Module}}Repo struct {
}

func (s *{{.Module}}Repo) Create(ctx context.Context, {{.ModuleLower}} domain.{{.Module}}) error {
	return global.DB.WithContext(ctx).Create(&{{.ModuleLower}}).Error
}

func (s *{{.Module}}Repo) Delete(ctx context.Context, {{.ModuleLower}} domain.{{.Module}}) error {
	return global.DB.WithContext(ctx).Delete(&{{.ModuleLower}}).Error
}

func (s *{{.Module}}Repo) DeleteByIds(ctx context.Context, ids request.Ids) error {
	return global.DB.WithContext(ctx).Delete(&[]domain.{{.Module}}{}, ids.Ids).Error
}

func (s *{{.Module}}Repo) Update(ctx context.Context, {{.ModuleLower}} map[string]interface{}) error {
    var columns []string
	for key := range {{.ModuleLower}} {
		columns = append(columns, key)
	}
	if _,ok := {{.ModuleLower}}["id"];!ok {
        // 不存在id
        return errors.New(fmt.Sprintf("missing %s.id","{{.ModuleLower}}"))
    }
	model := domain.{{.Module}}{}
	model.ID = uint({{.ModuleLower}}["id"].(float64))
	return global.DB.WithContext(ctx).Model(&model).Select(columns).Updates(&{{.ModuleLower}}).Error
}

func (s *{{.Module}}Repo) Find(ctx context.Context, {{.ModuleLower}} domain.{{.Module}}) (domain.{{.Module}}, error) {
	db := global.DB.WithContext(ctx).Model(&domain.{{.Module}}{})
	// TODO：条件过滤

	res := db.First(&{{.ModuleLower}})

	return {{.ModuleLower}}, res.Error
}

func (s *{{.Module}}Repo) List(ctx context.Context, page domain.Page{{.Module}}Search) ([]domain.{{.Module}}, int64, error) {
	var (
		{{.ModuleLower}}List []domain.{{.Module}}
		count int64
		err      error
	)
	// db
	db := global.DB.WithContext(ctx).Model(&domain.{{.Module}}{})
	// page
	offset, limit := pagelimit.OffsetLimit(page.PageNum, page.PageSize)

	// TODO：条件过滤

	err = db.Count(&count).Offset(offset).Limit(limit).Find(&{{.ModuleLower}}List).Error

	return {{.ModuleLower}}List, count, err
}
